{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"SPAship Operator Website Continues Deployment & Delivery on Kubernetes as easy as Github pages. Features Operator provides common enterprise website use cases in GitOps style. Multiple environments deployment and its resources configuration Sharing common components across all sites - header, footer, search etc. Multiple SPAs (resp. any content) deployment under different contexts Git webhooks integration for continuous Deployment and Delivery GitOps - Control your website deployment and website's content delivery purely by git Extendable - ability to provide another repository of content in addition to git (e.g. FTP) Website previews based on pull (merge) request Supported Runtimes Kubernetes Minikube Openshift 3 Openshift 4","title":"SPAship Operator"},{"location":"index.html#spaship-operator","text":"Website Continues Deployment & Delivery on Kubernetes as easy as Github pages.","title":"SPAship Operator"},{"location":"index.html#features","text":"Operator provides common enterprise website use cases in GitOps style. Multiple environments deployment and its resources configuration Sharing common components across all sites - header, footer, search etc. Multiple SPAs (resp. any content) deployment under different contexts Git webhooks integration for continuous Deployment and Delivery GitOps - Control your website deployment and website's content delivery purely by git Extendable - ability to provide another repository of content in addition to git (e.g. FTP) Website previews based on pull (merge) request","title":"Features"},{"location":"index.html#supported-runtimes","text":"Kubernetes Minikube Openshift 3 Openshift 4","title":"Supported Runtimes"},{"location":"how-it-works.html","text":"How It Works In very similar way how Github pages uses git branches the SPAship Operator works with git repositories and branches and tags. Website itself is described in website.yaml and stored in git repository. It covers: Environments Components Once Website administrator registers such git repository the Operator parses website.yaml file and deploys each environment as separate runtime. Continuous Deployment & Delivery Thanks to /api/webhook the operator is notified via standard git events about changes in website.yaml file as well as about changes of website's components. Thanks to such architecture it creates/deletes environments dynamically and offer continous deployment . Also performs incremental updates (via git pull) to offer continuous delivery . Architecture Following diagram shows Operator architecture.","title":"How It Works"},{"location":"how-it-works.html#how-it-works","text":"In very similar way how Github pages uses git branches the SPAship Operator works with git repositories and branches and tags. Website itself is described in website.yaml and stored in git repository. It covers: Environments Components Once Website administrator registers such git repository the Operator parses website.yaml file and deploys each environment as separate runtime.","title":"How It Works"},{"location":"how-it-works.html#continuous-deployment-delivery","text":"Thanks to /api/webhook the operator is notified via standard git events about changes in website.yaml file as well as about changes of website's components. Thanks to such architecture it creates/deletes environments dynamically and offer continous deployment . Also performs incremental updates (via git pull) to offer continuous delivery .","title":"Continuous Deployment &amp; Delivery"},{"location":"how-it-works.html#architecture","text":"Following diagram shows Operator architecture.","title":"Architecture"},{"location":"support.html","text":"Support Ask a question on StackOverflow . Read or create an issue .","title":"Support"},{"location":"support.html#support","text":"Ask a question on StackOverflow . Read or create an issue .","title":"Support"},{"location":"developer-guide/events.html","text":"Website Events Event Lists Event Name Description Is Available WEBSITE_CREATE website create event yes WEBSITE_UPDATE website update event yes WEBSITE_DELETE website delete event yes PREVIEW_CREATE website preview create event yes PREVIEW_UPDATE website preview update event yes PREVIEW_DELETE website preview delete event yes How to Consume Events All the events are published in this bus crud-event-source , there are two ways to consume events within the application vertx.eventBus().consumer(\"crud-event-source\",handler->...) for more details on browse this page use @ConsumeEvent annotation. for more details on browse this page fore more details on the consumer implementation there is an event log consumer available in LogEvents.java","title":"Website Events"},{"location":"developer-guide/events.html#website-events","text":"","title":"Website Events"},{"location":"developer-guide/events.html#event-lists","text":"Event Name Description Is Available WEBSITE_CREATE website create event yes WEBSITE_UPDATE website update event yes WEBSITE_DELETE website delete event yes PREVIEW_CREATE website preview create event yes PREVIEW_UPDATE website preview update event yes PREVIEW_DELETE website preview delete event yes","title":"Event Lists"},{"location":"developer-guide/events.html#how-to-consume-events","text":"All the events are published in this bus crud-event-source , there are two ways to consume events within the application vertx.eventBus().consumer(\"crud-event-source\",handler->...) for more details on browse this page use @ConsumeEvent annotation. for more details on browse this page fore more details on the consumer implementation there is an event log consumer available in LogEvents.java","title":"How to Consume Events"},{"location":"developer-guide/operator-performance-tests.html","text":"Operator Performance Testsuite This testsuite covers performance of the operator. Prepare cluster / minikube minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-spaship.minikube.info simple-dev-spaship-examples.minikube.info simple-prod-spaship-examples.minikube.info advanced-dev-spaship-examples.minikube.info advanced-prod-spaship-examples.minikube.info\" | sudo tee -a /etc/hosts Deploy Operator kubectl create namespace spaship # Operator configuration kubectl create configmap -n spaship spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n spaship -f manifests/install.yaml kubectl apply -n spaship -f manifests/minikube/ingress.yaml Operator is available under https://operator-spaship.minikube.info/ . Deploy sample website Deploy Website kubectl create namespace spaship-examples kubectl apply -n spaship-examples -f tests/performance/simple/deployment-simple-dev.yaml And watch: kubectl get -n spaship-examples websites.spaship.io -w Prepare Watch Windows Watch operator deployments: kubectl get -n spaship deployment -w Dashboard: minikube dashboard Webhook 1 - no matched website or components Run jmeter cd tests/performance/operator $JMETER /bin/jmeter.sh -t perftest-operator-webhook.jmx & Configuration 1 requests URL: webhook - no matched website or components 10 concurrent requests 10000 loops 500m CPU, 2 replicas kubectl apply -n spaship -f patch-cpu-500m.yaml kubectl scale -n spaship --replicas = 2 deployment spaship-operator Website is available under simple-dev-spaship-examples.minikube.info 500m CPU, 4 replicas kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship --replicas = 4 deployment spaship-operator 1000m CPU, 2 replicas kubectl apply -n spaship -f patch-cpu-1000m.yaml kubectl scale -n spaship --replicas = 2 deployment spaship-operator Cleanup kubectl delete -n spaship-examples websites.spaship.io --all Results 2021-03-04 Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Webhook 1 500m 2 527 500m 4 800 1000m 2 1200 Result numbers are throughput requests/second.","title":"Operator Performance Testsuite"},{"location":"developer-guide/operator-performance-tests.html#operator-performance-testsuite","text":"This testsuite covers performance of the operator.","title":"Operator Performance Testsuite"},{"location":"developer-guide/operator-performance-tests.html#prepare-cluster-minikube","text":"minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-spaship.minikube.info simple-dev-spaship-examples.minikube.info simple-prod-spaship-examples.minikube.info advanced-dev-spaship-examples.minikube.info advanced-prod-spaship-examples.minikube.info\" | sudo tee -a /etc/hosts","title":"Prepare cluster / minikube"},{"location":"developer-guide/operator-performance-tests.html#deploy-operator","text":"kubectl create namespace spaship # Operator configuration kubectl create configmap -n spaship spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n spaship -f manifests/install.yaml kubectl apply -n spaship -f manifests/minikube/ingress.yaml Operator is available under https://operator-spaship.minikube.info/ .","title":"Deploy Operator"},{"location":"developer-guide/operator-performance-tests.html#deploy-sample-website","text":"Deploy Website kubectl create namespace spaship-examples kubectl apply -n spaship-examples -f tests/performance/simple/deployment-simple-dev.yaml And watch: kubectl get -n spaship-examples websites.spaship.io -w","title":"Deploy sample website"},{"location":"developer-guide/operator-performance-tests.html#prepare-watch-windows","text":"Watch operator deployments: kubectl get -n spaship deployment -w Dashboard: minikube dashboard","title":"Prepare Watch Windows"},{"location":"developer-guide/operator-performance-tests.html#webhook-1-no-matched-website-or-components","text":"Run jmeter cd tests/performance/operator $JMETER /bin/jmeter.sh -t perftest-operator-webhook.jmx &","title":"Webhook 1 - no matched website or components"},{"location":"developer-guide/operator-performance-tests.html#configuration","text":"1 requests URL: webhook - no matched website or components 10 concurrent requests 10000 loops","title":"Configuration"},{"location":"developer-guide/operator-performance-tests.html#500m-cpu-2-replicas","text":"kubectl apply -n spaship -f patch-cpu-500m.yaml kubectl scale -n spaship --replicas = 2 deployment spaship-operator Website is available under simple-dev-spaship-examples.minikube.info","title":"500m CPU, 2 replicas"},{"location":"developer-guide/operator-performance-tests.html#500m-cpu-4-replicas","text":"kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship --replicas = 4 deployment spaship-operator","title":"500m CPU, 4 replicas"},{"location":"developer-guide/operator-performance-tests.html#1000m-cpu-2-replicas","text":"kubectl apply -n spaship -f patch-cpu-1000m.yaml kubectl scale -n spaship --replicas = 2 deployment spaship-operator","title":"1000m CPU, 2 replicas"},{"location":"developer-guide/operator-performance-tests.html#cleanup","text":"kubectl delete -n spaship-examples websites.spaship.io --all","title":"Cleanup"},{"location":"developer-guide/operator-performance-tests.html#results","text":"","title":"Results"},{"location":"developer-guide/operator-performance-tests.html#2021-03-04","text":"Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Webhook 1 500m 2 527 500m 4 800 1000m 2 1200 Result numbers are throughput requests/second.","title":"2021-03-04"},{"location":"developer-guide/project-structure.html","text":"Project Structure Git Repositories The SPAship github organization provides these repos: Operator - The main operator repo Content GIT - component git support SPAship Examples - various examples Maven Project consists of three modules config - Operator configuration model classes config-validator - website.yaml validator and json schema service - Operator main business logic Repository Maven artefacts are pushed to jboss.org repository . If other project depends on e.g. operator-config artefact Add this repository to pom.xml: https://repository.jboss.org/nexus/content/repositories/DXP/ and dependency: <dependency> <groupId> io.spaship.operator </groupId> <artifactId> operator-config </artifactId> <version> 1.2.0 </version> </dependency>","title":"Project Structure"},{"location":"developer-guide/project-structure.html#project-structure","text":"","title":"Project Structure"},{"location":"developer-guide/project-structure.html#git-repositories","text":"The SPAship github organization provides these repos: Operator - The main operator repo Content GIT - component git support SPAship Examples - various examples","title":"Git Repositories"},{"location":"developer-guide/project-structure.html#maven","text":"Project consists of three modules config - Operator configuration model classes config-validator - website.yaml validator and json schema service - Operator main business logic","title":"Maven"},{"location":"developer-guide/project-structure.html#repository","text":"Maven artefacts are pushed to jboss.org repository . If other project depends on e.g. operator-config artefact Add this repository to pom.xml: https://repository.jboss.org/nexus/content/repositories/DXP/ and dependency: <dependency> <groupId> io.spaship.operator </groupId> <artifactId> operator-config </artifactId> <version> 1.2.0 </version> </dependency>","title":"Repository"},{"location":"developer-guide/release.html","text":"Release Perform test first mvn clean package Update operator's target version quay.io/spaship/operator-jvm:<VERSION> in install.yaml , install-ns.yaml and install-ns-nocrd.yaml manifests. Perform maven release - prompted for target version which creates a tag mvn clean release:prepare release:perform Wait till Deploy to registries completes. Create a Github release based on the latest tag and document the release.","title":"Release"},{"location":"developer-guide/release.html#release","text":"Perform test first mvn clean package Update operator's target version quay.io/spaship/operator-jvm:<VERSION> in install.yaml , install-ns.yaml and install-ns-nocrd.yaml manifests. Perform maven release - prompted for target version which creates a tag mvn clean release:prepare release:perform Wait till Deploy to registries completes. Create a Github release based on the latest tag and document the release.","title":"Release"},{"location":"developer-guide/running-locally.html","text":"Running SPAship Operator Locally Minikube minikube config set driver hyperkit minikube start --addons ingress,dashboard --cpus 4 --memory 8192 minikube dashboard # tunnel not needed if using /etc/hosts bellow # minikube tunnel echo \" $( minikube ip ) minikube.info operator-spaship.minikube.info simple-dev-spaship-examples.minikube.info simple-prod-spaship-examples.minikube.info advanced-dev-spaship-examples.minikube.info advanced-prod-spaship-examples.minikube.info\" | sudo tee -a /etc/hosts kubectl create namespace spaship-examples Logs kubectl -n spaship logs --selector = spaship-operator-layer = service --tail 10 -f Local Development The only CRD needs to be registered: kubectl apply -f manifests/minikube/crd.yaml Build project mvn clean install Dev Mode Default values for dev mode are stored in application.properties in section # DEV cd service mvn quarkus:dev In few seconds the operator is up and connects to k8s cluster and listening to CRD changes. Register website simple or advanced . Setting kubectl context To view which context do you use just do: kubectl config current-context To switch to minikube context do: kubectl config use-context minikube Webhook API Development Init websites git repos rm -rf /tmp/repos ; mkdir /tmp/repos cp config/src/test/resources/gitconfig-test.yaml /tmp/repos/static-content-config.yaml docker run --rm -e \"CONFIG_PATH=/app/data/static-content-config.yaml\" -e \"TARGET_DIR=/app/data\" -e \"GIT_SSL_NO_VERIFY=true\" -v \"/tmp/repos/:/app/data/\" quay.io/spaship/content-git-init Start content-git-api on port 8090 docker run --rm -e \"APP_DATA_DIR=/app/data\" -v \"/tmp/repos/:/app/data/\" -p 8090 :8090 quay.io/spaship/content-git-api Fire event: WEBHOOK_URL = http://localhost:8080/api/webhook # WEBHOOK_URL=http://operator-spaship.minikube.info/api/webhook curl -i -X POST $WEBHOOK_URL -H \"Content-Type: application/json\" -H \"X-Gitlab-Event: Push Hook\" -H \"X-Gitlab-Token: TOKENSIMPLE\" --data-binary \"@src/test/resources/gitlab-push.json\" Security Start Local Keycloak docker run --name keycloak -e KEYCLOAK_USER = admin -e KEYCLOAK_PASSWORD = admin -p 8180 :8080 quay.io/keycloak/keycloak:12.0.4 Import realm located at service/src/test/resources Get Access token export access_token = $( \\ curl -X POST http://localhost:8180/auth/realms/spaship/protocol/openid-connect/token \\ --user spaship-manager:secret \\ -H 'content-type: application/x-www-form-urlencoded' \\ -d 'username=spaship-user&password=spaship-user&grant_type=password' | sed 's/.*access_token\":\"//g' | sed 's/\".*//g' \\ ) Test API curl -i -X GET -H \"Authorization: Bearer \" $access_token http://localhost:8080/api/v1/website/search More info in Quarkus docs . Build Docker Image You don't need to care about building docker images because they're covered by Github Action but for development purposes you can do it locally: mvn clean install cd service docker build -f src/main/docker/Dockerfile.jvm -t spaship/operator-jvm . Run image: docker run -i --rm -e APP_OPERATOR_PROVIDER_ENV_ENABLED = true -e APP_OPERATOR_PROVIDER_CRD_ENABLED = false -e WEBSITE_NAMESPACE = spaship-examples \\ -e WEBSITE_NAME = simple -e WEBSITE_GITURL = https://github.com/spaship/spaship-examples.git -e WEBSITE_CONFIG_DIR = websites/02-advanced -e WEBSITE_WEBHOOK_SECRET = TOKENSIMPLE \\ -p 8080 :8080 spaship/operator-jvm","title":"Running SPAship Operator Locally"},{"location":"developer-guide/running-locally.html#running-spaship-operator-locally","text":"","title":"Running SPAship Operator Locally"},{"location":"developer-guide/running-locally.html#minikube","text":"minikube config set driver hyperkit minikube start --addons ingress,dashboard --cpus 4 --memory 8192 minikube dashboard # tunnel not needed if using /etc/hosts bellow # minikube tunnel echo \" $( minikube ip ) minikube.info operator-spaship.minikube.info simple-dev-spaship-examples.minikube.info simple-prod-spaship-examples.minikube.info advanced-dev-spaship-examples.minikube.info advanced-prod-spaship-examples.minikube.info\" | sudo tee -a /etc/hosts kubectl create namespace spaship-examples","title":"Minikube"},{"location":"developer-guide/running-locally.html#logs","text":"kubectl -n spaship logs --selector = spaship-operator-layer = service --tail 10 -f","title":"Logs"},{"location":"developer-guide/running-locally.html#local-development","text":"The only CRD needs to be registered: kubectl apply -f manifests/minikube/crd.yaml","title":"Local Development"},{"location":"developer-guide/running-locally.html#build-project","text":"mvn clean install","title":"Build project"},{"location":"developer-guide/running-locally.html#dev-mode","text":"Default values for dev mode are stored in application.properties in section # DEV cd service mvn quarkus:dev In few seconds the operator is up and connects to k8s cluster and listening to CRD changes. Register website simple or advanced .","title":"Dev Mode"},{"location":"developer-guide/running-locally.html#setting-kubectl-context","text":"To view which context do you use just do: kubectl config current-context To switch to minikube context do: kubectl config use-context minikube","title":"Setting kubectl context"},{"location":"developer-guide/running-locally.html#webhook-api-development","text":"Init websites git repos rm -rf /tmp/repos ; mkdir /tmp/repos cp config/src/test/resources/gitconfig-test.yaml /tmp/repos/static-content-config.yaml docker run --rm -e \"CONFIG_PATH=/app/data/static-content-config.yaml\" -e \"TARGET_DIR=/app/data\" -e \"GIT_SSL_NO_VERIFY=true\" -v \"/tmp/repos/:/app/data/\" quay.io/spaship/content-git-init Start content-git-api on port 8090 docker run --rm -e \"APP_DATA_DIR=/app/data\" -v \"/tmp/repos/:/app/data/\" -p 8090 :8090 quay.io/spaship/content-git-api Fire event: WEBHOOK_URL = http://localhost:8080/api/webhook # WEBHOOK_URL=http://operator-spaship.minikube.info/api/webhook curl -i -X POST $WEBHOOK_URL -H \"Content-Type: application/json\" -H \"X-Gitlab-Event: Push Hook\" -H \"X-Gitlab-Token: TOKENSIMPLE\" --data-binary \"@src/test/resources/gitlab-push.json\"","title":"Webhook API Development"},{"location":"developer-guide/running-locally.html#security","text":"","title":"Security"},{"location":"developer-guide/running-locally.html#start-local-keycloak","text":"docker run --name keycloak -e KEYCLOAK_USER = admin -e KEYCLOAK_PASSWORD = admin -p 8180 :8080 quay.io/keycloak/keycloak:12.0.4 Import realm located at service/src/test/resources","title":"Start Local Keycloak"},{"location":"developer-guide/running-locally.html#get-access-token","text":"export access_token = $( \\ curl -X POST http://localhost:8180/auth/realms/spaship/protocol/openid-connect/token \\ --user spaship-manager:secret \\ -H 'content-type: application/x-www-form-urlencoded' \\ -d 'username=spaship-user&password=spaship-user&grant_type=password' | sed 's/.*access_token\":\"//g' | sed 's/\".*//g' \\ )","title":"Get Access token"},{"location":"developer-guide/running-locally.html#test-api","text":"curl -i -X GET -H \"Authorization: Bearer \" $access_token http://localhost:8080/api/v1/website/search More info in Quarkus docs .","title":"Test API"},{"location":"developer-guide/running-locally.html#build-docker-image","text":"You don't need to care about building docker images because they're covered by Github Action but for development purposes you can do it locally: mvn clean install cd service docker build -f src/main/docker/Dockerfile.jvm -t spaship/operator-jvm . Run image: docker run -i --rm -e APP_OPERATOR_PROVIDER_ENV_ENABLED = true -e APP_OPERATOR_PROVIDER_CRD_ENABLED = false -e WEBSITE_NAMESPACE = spaship-examples \\ -e WEBSITE_NAME = simple -e WEBSITE_GITURL = https://github.com/spaship/spaship-examples.git -e WEBSITE_CONFIG_DIR = websites/02-advanced -e WEBSITE_WEBHOOK_SECRET = TOKENSIMPLE \\ -p 8080 :8080 spaship/operator-jvm","title":"Build Docker Image"},{"location":"developer-guide/website-performance-tests.html","text":"Website Performance Testsuite This testsuite covers performance of target website environment. Prepare cluster / minikube minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-spaship.minikube.info simple-dev-spaship-examples.minikube.info simple-prod-spaship-examples.minikube.info advanced-dev-spaship-examples.minikube.info advanced-prod-spaship-examples.minikube.info\" | sudo tee -a /etc/hosts Deploy Operator kubectl create namespace spaship # Operator configuration kubectl create configmap -n spaship spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n spaship -f manifests/install.yaml Prepare Watch Windows Watch deployments: kubectl create namespace spaship-examples kubectl get -n spaship-examples deployment -w Dashboard: minikube dashboard Simple Website Testsuite (no SSI) Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/simple/perftest-simple.jmx & Deploy Website cd tests/performance/simple/ kubectl apply -n spaship-examples -f deployment-simple-dev.yaml Configuration 3 requests per test: main page, css, js 100 concurrent requests 100 loops 500m CPU, 2 replicas kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment simple-content-dev Website is available under simple-dev-spaship-examples.minikube.info 500m CPU, 4 replicas kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment simple-content-dev 1000m CPU, 2 replicas kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment simple-content-dev 1000m CPU, 4 replicas kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment simple-content-dev Cleanup kubectl delete -n spaship-examples websites.spaship.io --all Advanced Website Testsuite (SSI used) Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/advanced/perftest-advanced.jmx & Deploy Website cd tests/performance/advanced/ kubectl apply -n spaship-examples -f deployment-advanced-dev.yaml Configuration 3 requests per test: main page (SSI performed), css, js 100 concurrent requests 100 loops 500m CPU, 2 replicas kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment advanced-content-dev Website is available under advanced-dev-spaship-examples.minikube.info 500m CPU, 4 replicas kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment advanced-content-dev 1000m CPU, 2 replicas kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment advanced-content-dev 1000m CPU, 4 replicas kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment advanced-content-dev Cleanup kubectl delete -n spaship-examples websites.spaship.io --all Results 2021-03-04 Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Simple Web Advanced Web 500m 2 2100 1360 500m 4 4300 2780 1000m 2 3000 2700 1000m 4 3700 3300 Result numbers are throughput requests/second.","title":"Website Performance Testsuite"},{"location":"developer-guide/website-performance-tests.html#website-performance-testsuite","text":"This testsuite covers performance of target website environment.","title":"Website Performance Testsuite"},{"location":"developer-guide/website-performance-tests.html#prepare-cluster-minikube","text":"minikube delete minikube config set driver hyperkit minikube config set memory 8192 minikube config set cpus 4 minikube start --addons ingress,dashboard,metrics-server echo \" $( minikube ip ) minikube.info operator-spaship.minikube.info simple-dev-spaship-examples.minikube.info simple-prod-spaship-examples.minikube.info advanced-dev-spaship-examples.minikube.info advanced-prod-spaship-examples.minikube.info\" | sudo tee -a /etc/hosts","title":"Prepare cluster / minikube"},{"location":"developer-guide/website-performance-tests.html#deploy-operator","text":"kubectl create namespace spaship # Operator configuration kubectl create configmap -n spaship spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info # Operator kubectl apply -n spaship -f manifests/install.yaml","title":"Deploy Operator"},{"location":"developer-guide/website-performance-tests.html#prepare-watch-windows","text":"Watch deployments: kubectl create namespace spaship-examples kubectl get -n spaship-examples deployment -w Dashboard: minikube dashboard","title":"Prepare Watch Windows"},{"location":"developer-guide/website-performance-tests.html#simple-website-testsuite-no-ssi","text":"Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/simple/perftest-simple.jmx & Deploy Website cd tests/performance/simple/ kubectl apply -n spaship-examples -f deployment-simple-dev.yaml","title":"Simple Website Testsuite (no SSI)"},{"location":"developer-guide/website-performance-tests.html#configuration","text":"3 requests per test: main page, css, js 100 concurrent requests 100 loops","title":"Configuration"},{"location":"developer-guide/website-performance-tests.html#500m-cpu-2-replicas","text":"kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment simple-content-dev Website is available under simple-dev-spaship-examples.minikube.info","title":"500m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests.html#500m-cpu-4-replicas","text":"kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment simple-content-dev","title":"500m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests.html#1000m-cpu-2-replicas","text":"kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment simple-content-dev","title":"1000m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests.html#1000m-cpu-4-replicas","text":"kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment simple-content-dev","title":"1000m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests.html#cleanup","text":"kubectl delete -n spaship-examples websites.spaship.io --all","title":"Cleanup"},{"location":"developer-guide/website-performance-tests.html#advanced-website-testsuite-ssi-used","text":"Run jmeter $JMETER /bin/jmeter.sh -t tests/performance/advanced/perftest-advanced.jmx & Deploy Website cd tests/performance/advanced/ kubectl apply -n spaship-examples -f deployment-advanced-dev.yaml","title":"Advanced Website Testsuite (SSI used)"},{"location":"developer-guide/website-performance-tests.html#configuration_1","text":"3 requests per test: main page (SSI performed), css, js 100 concurrent requests 100 loops","title":"Configuration"},{"location":"developer-guide/website-performance-tests.html#500m-cpu-2-replicas_1","text":"kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment advanced-content-dev Website is available under advanced-dev-spaship-examples.minikube.info","title":"500m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests.html#500m-cpu-4-replicas_1","text":"kubectl apply -n spaship-examples -f patch-cpu-500m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment advanced-content-dev","title":"500m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests.html#1000m-cpu-2-replicas_1","text":"kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 2 deployment advanced-content-dev","title":"1000m CPU, 2 replicas"},{"location":"developer-guide/website-performance-tests.html#1000m-cpu-4-replicas_1","text":"kubectl apply -n spaship-examples -f patch-cpu-1000m.yaml kubectl scale -n spaship-examples --replicas = 4 deployment advanced-content-dev","title":"1000m CPU, 4 replicas"},{"location":"developer-guide/website-performance-tests.html#cleanup_1","text":"kubectl delete -n spaship-examples websites.spaship.io --all","title":"Cleanup"},{"location":"developer-guide/website-performance-tests.html#results","text":"","title":"Results"},{"location":"developer-guide/website-performance-tests.html#2021-03-04","text":"Model Identifier: MacBookPro16,1 Processor Name: 6-Core Intel Core i7 Processor Speed: 2,6 GHz Number of Processors: 1 Total Number of Cores: 6 L2 Cache (per Core): 256 KB L3 Cache: 12 MB Hyper-Threading Technology: Enabled Memory: 32 GB CPU Replicas Simple Web Advanced Web 500m 2 2100 1360 500m 4 4300 2780 1000m 2 3000 2700 1000m 4 3700 3300 Result numbers are throughput requests/second.","title":"2021-03-04"},{"location":"getting-started/creating-your-website.html","text":"Creating Your Website SPAship operator is declarative way of deployment so you need to describe your desired environments and what components are deployed under specific contexts. Create Website Manifest Example of website.yaml file apiVersion : v1 # Environments envs : dev : branch : main # dev git branch (can be git tag) prod : branch : prod # prod git branch (can be git tag e.g. \"1.0.0\") deployment : replicas : 2 # per environment deployment configuration # List of Website Components / Blocks components : - context : /theme # URL context of website shared component kind : git spec : url : https://github.com/spaship/spaship-examples.git dir : /websites/01-simple/theme # sub directory within git repo - context : / # URL context of main SPA kind : git spec : url : https://github.com/spaship/spaship-examples.git dir : /websites/01-simple/home Push it into your git repo git add website.yaml git push Reference See Website Specification for more details.","title":"Creating Your Website"},{"location":"getting-started/creating-your-website.html#creating-your-website","text":"SPAship operator is declarative way of deployment so you need to describe your desired environments and what components are deployed under specific contexts.","title":"Creating Your Website"},{"location":"getting-started/creating-your-website.html#create-website-manifest","text":"Example of website.yaml file apiVersion : v1 # Environments envs : dev : branch : main # dev git branch (can be git tag) prod : branch : prod # prod git branch (can be git tag e.g. \"1.0.0\") deployment : replicas : 2 # per environment deployment configuration # List of Website Components / Blocks components : - context : /theme # URL context of website shared component kind : git spec : url : https://github.com/spaship/spaship-examples.git dir : /websites/01-simple/theme # sub directory within git repo - context : / # URL context of main SPA kind : git spec : url : https://github.com/spaship/spaship-examples.git dir : /websites/01-simple/home","title":"Create Website Manifest"},{"location":"getting-started/creating-your-website.html#push-it-into-your-git-repo","text":"git add website.yaml git push","title":"Push it into your git repo"},{"location":"getting-started/creating-your-website.html#reference","text":"See Website Specification for more details.","title":"Reference"},{"location":"getting-started/operator-installation.html","text":"Operator Installation Operator needs very few configurations in config map and namespace. Here is simple use case. For more details see Operator Manual . If you don't have Kubernetes cluster install the minikube . Create separate namespace kubectl create namespace spaship-operator Create Operator's configuration kubectl create configmap -n spaship-operator spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info Install Operator kubectl apply -n spaship-operator -f https://raw.githubusercontent.com/spaship/operator/main/manifests/install.yaml","title":"Operator Installation"},{"location":"getting-started/operator-installation.html#operator-installation","text":"Operator needs very few configurations in config map and namespace. Here is simple use case. For more details see Operator Manual . If you don't have Kubernetes cluster install the minikube .","title":"Operator Installation"},{"location":"getting-started/operator-installation.html#create-separate-namespace","text":"kubectl create namespace spaship-operator","title":"Create separate namespace"},{"location":"getting-started/operator-installation.html#create-operators-configuration","text":"kubectl create configmap -n spaship-operator spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info","title":"Create Operator's configuration"},{"location":"getting-started/operator-installation.html#install-operator","text":"kubectl apply -n spaship-operator -f https://raw.githubusercontent.com/spaship/operator/main/manifests/install.yaml","title":"Install Operator"},{"location":"getting-started/website-deployment.html","text":"Website Deployment To deploy your website just create simple deployment manifest which points to your git repository containing website.yaml file. Choose wisely name of website - it's used for creating your runtime and configuration. Create Deployment Manifest Example of my-website.yaml : apiVersion : spaship.io/v1 kind : Website metadata : name : simple spec : gitUrl : https://github.com/spaship/spaship-examples.git dir : websites/01-simple # Relative path to your website.yaml secretToken : TOKENSIMPLE Deploy Website kubectl create namespace spaship-examples kubectl apply -n spaship-examples -f my-website.yaml That's IT! Operator creates both dev and prod environment with main SPA and theme . Continuous Deployment & Delivery The operator is also ready to consume Git webhook events for: Continues Deployment (changes in environments or components) Continues Delivery (changes in theme and main SPA ). See user guide how to set up webhook. More examples See git repository spaship-examples .","title":"Website Deployment"},{"location":"getting-started/website-deployment.html#website-deployment","text":"To deploy your website just create simple deployment manifest which points to your git repository containing website.yaml file. Choose wisely name of website - it's used for creating your runtime and configuration.","title":"Website Deployment"},{"location":"getting-started/website-deployment.html#create-deployment-manifest","text":"Example of my-website.yaml : apiVersion : spaship.io/v1 kind : Website metadata : name : simple spec : gitUrl : https://github.com/spaship/spaship-examples.git dir : websites/01-simple # Relative path to your website.yaml secretToken : TOKENSIMPLE","title":"Create Deployment Manifest"},{"location":"getting-started/website-deployment.html#deploy-website","text":"kubectl create namespace spaship-examples kubectl apply -n spaship-examples -f my-website.yaml That's IT! Operator creates both dev and prod environment with main SPA and theme .","title":"Deploy Website"},{"location":"getting-started/website-deployment.html#continuous-deployment-delivery","text":"The operator is also ready to consume Git webhook events for: Continues Deployment (changes in environments or components) Continues Delivery (changes in theme and main SPA ). See user guide how to set up webhook.","title":"Continuous Deployment &amp; Delivery"},{"location":"getting-started/website-deployment.html#more-examples","text":"See git repository spaship-examples .","title":"More examples"},{"location":"operator-manual/configuration.html","text":"Operator Configuration Configuration Properties Any Operator's configuration defined in application.properties can be overridden via env variable but in uppercase and dot is replaced by underscore. Important Configurations Environment Variable Default Description APP_OPERATOR_ROUTER_MODE disabled Router module. Values: ingress or openshift or disabled APP_OPERATOR_PROVIDER_CRD_ENABLED true If false CRD is not watched APP_OPERATOR_PROVIDER_ENV_ENABLED false If true then operator expects website definition via ENV variable. See example APP_OPERATOR_URL Operator's URL - used to generate API links in REST API APP_OPERATOR_IMAGE_INIT_NAME quay.io/spaship/content-git-init Init image name APP_OPERATOR_IMAGE_INIT_VERSION 1.3.6 Init image version APP_OPERATOR_IMAGE_API_NAME quay.io/spaship/content-git-api Api image name APP_OPERATOR_IMAGE_API_VERSION 1.3.6 Api image version APP_OPERATOR_IMAGE_HTTPD_NAME quay.io/spaship/httpd Httpd image name APP_OPERATOR_IMAGE_HTTPD_VERSION 1.3.6 Httpd image version APP_OPERATOR_CONTENT_ENVS Operator's website environment overrides. Useful for defining default deployment overrides for particular environments e.g. prod QUARKUS_OIDC_AUTH_SERVER_URL Open ID Connect Auth Server for REST API authentication. See Complete reference QUARKUS_OIDC_CLIENT_ID Open ID Connect Client ID JAVA_OPTIONS Additional JAVA Options EVENT_SOURCING_ENABLED true turn on or off event sourcing functionality EVENT_LOGGING_ENABLED true turn on or off event logging functionality Environment Defaults It's common to have defined deployment defaults for particular environment. Typically production. The value of APP_OPERATOR_CONTENT_ENVS property can define in JSON format the default values for env section for all websites. Each website but can override this default in its website.yaml spec. If the deployed website is preview website created from Merge Request then preview name is used. The env name can be also regexp but exact match (e.g. prod env name) overrides the regexp. Example: { \"envs\" : { \".*\" : { \"deployment\" : { \"httpd\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"100m\" , \"memory\" : \"100Mi\" }, \"limits\" : { \"cpu\" : \"150m\" , \"memory\" : \"150Mi\" } } } } }, \"preview\" : { \"deployment\" : { \"httpd\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" : { \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" } } }, \"api\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" : { \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" } } } } }, \"prod\" : { \"deployment\" : { \"replicas\" : 2 , \"httpd\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"100m\" , \"memory\" : \"150Mi\" }, \"limits\" : { \"cpu\" : \"500m\" , \"memory\" : \"250Mi\" } } } } } } } Compressed: { \"envs\" :{ \".*\" :{ \"deployment\" :{ \"httpd\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"100m\" , \"memory\" : \"100Mi\" }, \"limits\" :{ \"cpu\" : \"150m\" , \"memory\" : \"150Mi\" }}}}}, \"preview\" :{ \"deployment\" :{ \"httpd\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" :{ \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" }}}, \"api\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" :{ \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" }}}}}, \"prod\" :{ \"deployment\" :{ \"replicas\" : 2 , \"httpd\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"100m\" , \"memory\" : \"150Mi\" }, \"limits\" :{ \"cpu\" : \"500m\" , \"memory\" : \"250Mi\" }}}}}}}","title":"Operator Configuration"},{"location":"operator-manual/configuration.html#operator-configuration","text":"","title":"Operator Configuration"},{"location":"operator-manual/configuration.html#configuration-properties","text":"Any Operator's configuration defined in application.properties can be overridden via env variable but in uppercase and dot is replaced by underscore.","title":"Configuration Properties"},{"location":"operator-manual/configuration.html#important-configurations","text":"Environment Variable Default Description APP_OPERATOR_ROUTER_MODE disabled Router module. Values: ingress or openshift or disabled APP_OPERATOR_PROVIDER_CRD_ENABLED true If false CRD is not watched APP_OPERATOR_PROVIDER_ENV_ENABLED false If true then operator expects website definition via ENV variable. See example APP_OPERATOR_URL Operator's URL - used to generate API links in REST API APP_OPERATOR_IMAGE_INIT_NAME quay.io/spaship/content-git-init Init image name APP_OPERATOR_IMAGE_INIT_VERSION 1.3.6 Init image version APP_OPERATOR_IMAGE_API_NAME quay.io/spaship/content-git-api Api image name APP_OPERATOR_IMAGE_API_VERSION 1.3.6 Api image version APP_OPERATOR_IMAGE_HTTPD_NAME quay.io/spaship/httpd Httpd image name APP_OPERATOR_IMAGE_HTTPD_VERSION 1.3.6 Httpd image version APP_OPERATOR_CONTENT_ENVS Operator's website environment overrides. Useful for defining default deployment overrides for particular environments e.g. prod QUARKUS_OIDC_AUTH_SERVER_URL Open ID Connect Auth Server for REST API authentication. See Complete reference QUARKUS_OIDC_CLIENT_ID Open ID Connect Client ID JAVA_OPTIONS Additional JAVA Options EVENT_SOURCING_ENABLED true turn on or off event sourcing functionality EVENT_LOGGING_ENABLED true turn on or off event logging functionality","title":"Important Configurations"},{"location":"operator-manual/configuration.html#environment-defaults","text":"It's common to have defined deployment defaults for particular environment. Typically production. The value of APP_OPERATOR_CONTENT_ENVS property can define in JSON format the default values for env section for all websites. Each website but can override this default in its website.yaml spec. If the deployed website is preview website created from Merge Request then preview name is used. The env name can be also regexp but exact match (e.g. prod env name) overrides the regexp. Example: { \"envs\" : { \".*\" : { \"deployment\" : { \"httpd\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"100m\" , \"memory\" : \"100Mi\" }, \"limits\" : { \"cpu\" : \"150m\" , \"memory\" : \"150Mi\" } } } } }, \"preview\" : { \"deployment\" : { \"httpd\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" : { \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" } } }, \"api\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" : { \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" } } } } }, \"prod\" : { \"deployment\" : { \"replicas\" : 2 , \"httpd\" : { \"resources\" : { \"requests\" : { \"cpu\" : \"100m\" , \"memory\" : \"150Mi\" }, \"limits\" : { \"cpu\" : \"500m\" , \"memory\" : \"250Mi\" } } } } } } } Compressed: { \"envs\" :{ \".*\" :{ \"deployment\" :{ \"httpd\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"100m\" , \"memory\" : \"100Mi\" }, \"limits\" :{ \"cpu\" : \"150m\" , \"memory\" : \"150Mi\" }}}}}, \"preview\" :{ \"deployment\" :{ \"httpd\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" :{ \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" }}}, \"api\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"10m\" , \"memory\" : \"50Mi\" }, \"limits\" :{ \"cpu\" : \"50m\" , \"memory\" : \"50Mi\" }}}}}, \"prod\" :{ \"deployment\" :{ \"replicas\" : 2 , \"httpd\" :{ \"resources\" :{ \"requests\" :{ \"cpu\" : \"100m\" , \"memory\" : \"150Mi\" }, \"limits\" :{ \"cpu\" : \"500m\" , \"memory\" : \"250Mi\" }}}}}}}","title":"Environment Defaults"},{"location":"operator-manual/custom-ca-cert.html","text":"Custom CA Certificate SSL Verification can be easily turned off by using sslVerify attribute in Website definition. However, it's recommended to correctly setup CA certificates if they're not as part of default certificates. To use custom CA certificate it's needed to customize 3 images: Operator Content Init Container Content Api Container Build Own Images One option is to build own images on top of SPAship default images. Follow Docker files bellow. Each contains instructions how to build own image. It's recommended to use version suffix e.g. 1.1.2-rhitca to make clear what is the parent image or use same version but different context. Operator Content Init Container Content Api Container It's possible to use Openshift build templates stored next to Docker files Once such images are build the operator needs to use them. Just set operator's system variables APP_OPERATOR_IMAGE_INIT_VERSION and APP_OPERATOR_IMAGE_API_VERSION in spaship-operator-config config map.","title":"Custom CA Certificate"},{"location":"operator-manual/custom-ca-cert.html#custom-ca-certificate","text":"SSL Verification can be easily turned off by using sslVerify attribute in Website definition. However, it's recommended to correctly setup CA certificates if they're not as part of default certificates. To use custom CA certificate it's needed to customize 3 images: Operator Content Init Container Content Api Container","title":"Custom CA Certificate"},{"location":"operator-manual/custom-ca-cert.html#build-own-images","text":"One option is to build own images on top of SPAship default images. Follow Docker files bellow. Each contains instructions how to build own image. It's recommended to use version suffix e.g. 1.1.2-rhitca to make clear what is the parent image or use same version but different context. Operator Content Init Container Content Api Container It's possible to use Openshift build templates stored next to Docker files Once such images are build the operator needs to use them. Just set operator's system variables APP_OPERATOR_IMAGE_INIT_VERSION and APP_OPERATOR_IMAGE_API_VERSION in spaship-operator-config config map.","title":"Build Own Images"},{"location":"operator-manual/installation-types.html","text":"Installation Types Multi Tenant Configuration Default installation is that operator is running within own namespace and controls websites within their namespaces defined by CRDs. One Tenant Configuration It's possible to completely disable Custom Resource Definition and define only one website that will be managed. Operator needs to have defined these properties: apiVersion : v1 kind : ConfigMap metadata : name : spaship-operator-config data : APP_OPERATOR_ROUTER_MODE : 'ingress' APP_OPERATOR_WEBSITE_DOMAIN : 'minikube.info' APP_OPERATOR_PROVIDER_ENV_ENABLED : 'true' APP_OPERATOR_PROVIDER_CRD_ENABLED : 'false' WEBSITE_NAMESPACE : 'spaship-examples' WEBSITE_NAME : 'simple' WEBSITE_GITURL : 'https://github.com/spaship/spaship-examples.git' WEBSITE_SSLVERIFY : 'true' # Optional WEBSITE_BRANCH : 'main' # Optional WEBSITE_CONFIG_DIR : 'websites/02-advanced' # Optional WEBSITE_WEBHOOK_SECRET : 'CHANGEIT' WEBSITE_PREVIEWS : 'true' Then Operator manage the website within same namespace as is installed. Namespaced Installation For limited installation without ClusterRole permissions it's possible to install the Operator within the namespace with Role instead of ClusterRole . It's up to configuration if Multi or One tenant way of management is used. Both are supported.","title":"Installation Types"},{"location":"operator-manual/installation-types.html#installation-types","text":"","title":"Installation Types"},{"location":"operator-manual/installation-types.html#multi-tenant-configuration","text":"Default installation is that operator is running within own namespace and controls websites within their namespaces defined by CRDs.","title":"Multi Tenant Configuration"},{"location":"operator-manual/installation-types.html#one-tenant-configuration","text":"It's possible to completely disable Custom Resource Definition and define only one website that will be managed. Operator needs to have defined these properties: apiVersion : v1 kind : ConfigMap metadata : name : spaship-operator-config data : APP_OPERATOR_ROUTER_MODE : 'ingress' APP_OPERATOR_WEBSITE_DOMAIN : 'minikube.info' APP_OPERATOR_PROVIDER_ENV_ENABLED : 'true' APP_OPERATOR_PROVIDER_CRD_ENABLED : 'false' WEBSITE_NAMESPACE : 'spaship-examples' WEBSITE_NAME : 'simple' WEBSITE_GITURL : 'https://github.com/spaship/spaship-examples.git' WEBSITE_SSLVERIFY : 'true' # Optional WEBSITE_BRANCH : 'main' # Optional WEBSITE_CONFIG_DIR : 'websites/02-advanced' # Optional WEBSITE_WEBHOOK_SECRET : 'CHANGEIT' WEBSITE_PREVIEWS : 'true' Then Operator manage the website within same namespace as is installed.","title":"One Tenant Configuration"},{"location":"operator-manual/installation-types.html#namespaced-installation","text":"For limited installation without ClusterRole permissions it's possible to install the Operator within the namespace with Role instead of ClusterRole . It's up to configuration if Multi or One tenant way of management is used. Both are supported.","title":"Namespaced Installation"},{"location":"operator-manual/installation.html","text":"Installation It's advised to install operator in separate namespace. kubectl create namespace spaship-operator Configuration Configuration is managed via ConfigMap which is mapped as environment variables. List of important configuration properties is listed in Operator Configuration page. Kubernetes Configuration kubectl create configmap -n spaship-operator spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info Openshift Configuration kubectl create configmap -n spaship-operator spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = openshift \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info Operator Installation You can manually install all necessary assets of operator by: kubectl apply -n spaship-operator -f https://raw.githubusercontent.com/spaship/operator/main/manifests/install.yaml Operator's Ingress/Route Operator doesn't create automatically Ingress/Route so they need to be created manually: Example of ingress with host operator-spaship.minikube.info . kubectl apply -n spaship-operator -f https://raw.githubusercontent.com/spaship/operator/main/manifests/minikube/ingress.yaml Example of Openshift route: oc create route -n spaship-operator edge operator --service = spaship-operator --hostname = spaship-operator.example.com","title":"Installation"},{"location":"operator-manual/installation.html#installation","text":"It's advised to install operator in separate namespace. kubectl create namespace spaship-operator","title":"Installation"},{"location":"operator-manual/installation.html#configuration","text":"Configuration is managed via ConfigMap which is mapped as environment variables. List of important configuration properties is listed in Operator Configuration page.","title":"Configuration"},{"location":"operator-manual/installation.html#kubernetes-configuration","text":"kubectl create configmap -n spaship-operator spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = ingress \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info","title":"Kubernetes Configuration"},{"location":"operator-manual/installation.html#openshift-configuration","text":"kubectl create configmap -n spaship-operator spaship-operator-config \\ --from-literal = APP_OPERATOR_ROUTER_MODE = openshift \\ --from-literal = APP_OPERATOR_WEBSITE_DOMAIN = minikube.info","title":"Openshift Configuration"},{"location":"operator-manual/installation.html#operator-installation","text":"You can manually install all necessary assets of operator by: kubectl apply -n spaship-operator -f https://raw.githubusercontent.com/spaship/operator/main/manifests/install.yaml","title":"Operator Installation"},{"location":"operator-manual/installation.html#operators-ingressroute","text":"Operator doesn't create automatically Ingress/Route so they need to be created manually: Example of ingress with host operator-spaship.minikube.info . kubectl apply -n spaship-operator -f https://raw.githubusercontent.com/spaship/operator/main/manifests/minikube/ingress.yaml Example of Openshift route: oc create route -n spaship-operator edge operator --service = spaship-operator --hostname = spaship-operator.example.com","title":"Operator's Ingress/Route"},{"location":"operator-manual/restapi.html","text":"REST API The operator provides REST API. It's documented by Open API standard and available under http://<operator>/openapi or actual copy is in manifests/api directory. How API is secured is described in next page . API List The /api returns actual list of APIs. [ \"/api/webhook\" , \"/api/v1/website/search?namespace={namespace}&name={name}\" , \"/api/v1/website/{namespace}/{website}/{env}/applications\" , \"/api/v1/website/{namespace}/{website}/{env}/applications/{name}\" ] Webhook API Under /api/webhook is exposed Webhook API to consume Git webhook. Website API Website API provides information about deployed websites. Used by SPAship Manager UI. Required roles: spaship-user /api/v1/website/search?namespace={namespace}&name={name} List of websites managed by Operator. Parameters namespace and name are optional. /api/v1/website/{namespace}/{website}/{env}/applications List of Applications (components) Path parameters namespace , website , env are required /api/v1/website/{namespace}/{website}/{env}/applications/{name} Website application (component) detail - get actual data via Content API Path parameters namespace , website , env , name are required","title":"REST API"},{"location":"operator-manual/restapi.html#rest-api","text":"The operator provides REST API. It's documented by Open API standard and available under http://<operator>/openapi or actual copy is in manifests/api directory. How API is secured is described in next page .","title":"REST API"},{"location":"operator-manual/restapi.html#api-list","text":"The /api returns actual list of APIs. [ \"/api/webhook\" , \"/api/v1/website/search?namespace={namespace}&name={name}\" , \"/api/v1/website/{namespace}/{website}/{env}/applications\" , \"/api/v1/website/{namespace}/{website}/{env}/applications/{name}\" ]","title":"API List"},{"location":"operator-manual/restapi.html#webhook-api","text":"Under /api/webhook is exposed Webhook API to consume Git webhook.","title":"Webhook API"},{"location":"operator-manual/restapi.html#website-api","text":"Website API provides information about deployed websites. Used by SPAship Manager UI. Required roles: spaship-user /api/v1/website/search?namespace={namespace}&name={name} List of websites managed by Operator. Parameters namespace and name are optional. /api/v1/website/{namespace}/{website}/{env}/applications List of Applications (components) Path parameters namespace , website , env are required /api/v1/website/{namespace}/{website}/{env}/applications/{name} Website application (component) detail - get actual data via Content API Path parameters namespace , website , env , name are required","title":"Website API"},{"location":"operator-manual/security.html","text":"Security Exposed APIs are secured in different ways based on use case. Webhook Security The api/webhook is secured by securityToken defined in deployment descriptor. Any webhook request requires security token (based on git provider), and the operator match all websites secured by given security token and perform the appropriate action. In case that one git repository is used for more websites (e.g. common components like header/footer), and they use same branch then each website needs to register its own webhook. API Security Operator's API is secured primarily via JWT Token and is able to perform authentication and also map JWT groups to the roles. Role Based Authorization Operator Roles: spaship-user - read only actions spaship-admin - admin actions JWT Token To enable JWT just define auth server url and client id by env variables: QUARKUS_OIDC_AUTH_SERVER_URL - auth server url QUARKUS_OIDC_CLIENT_ID - client id Ideally auth server is configured to propagate appropriate groups within access tokens. In case that group names are different see docs how to configure the mapping . See complete reference docs CORS Cors is enabled by default with * allowing any domain access the API. To configure more precisely see CORS docs . LDAP Groups Operator provides LDAP groups to roles mapping as alternative way to JWT Token Groups. It's possible to use both techniques where JWT provides username and its roles and LDAP queries for additional roles. To enable LDAP define following variables: APP_LDAP_ENABLED - Enable it by true . By default false APP_LDAP_URL - Ldap URL e.g. ldap://ldap.corp.redhat.com APP_LDAP_SEARCH_NAME - LDAP Query Search APP_LDAP_SEARCH_FILTER - Filter format. Default is uid=%s where %s is replaced by JWT username or by claim value if APP_LDAP_JWT_CLAIM is defined. APP_LDAP_SEARCH_GROUPS_ATTRNAME - LDAP attribute containing groups APP_LDAP_SEARCH_ROLE_USER_ATTRVALUE - group name for user role APP_LDAP_SEARCH_ROLE_ADMIN_ATTRVALUE - group name for admin role APP_LDAP_JWT_CLAIM - if set the filter value is used from claim name.","title":"Security"},{"location":"operator-manual/security.html#security","text":"Exposed APIs are secured in different ways based on use case.","title":"Security"},{"location":"operator-manual/security.html#webhook-security","text":"The api/webhook is secured by securityToken defined in deployment descriptor. Any webhook request requires security token (based on git provider), and the operator match all websites secured by given security token and perform the appropriate action. In case that one git repository is used for more websites (e.g. common components like header/footer), and they use same branch then each website needs to register its own webhook.","title":"Webhook Security"},{"location":"operator-manual/security.html#api-security","text":"Operator's API is secured primarily via JWT Token and is able to perform authentication and also map JWT groups to the roles.","title":"API Security"},{"location":"operator-manual/security.html#role-based-authorization","text":"Operator Roles: spaship-user - read only actions spaship-admin - admin actions","title":"Role Based Authorization"},{"location":"operator-manual/security.html#jwt-token","text":"To enable JWT just define auth server url and client id by env variables: QUARKUS_OIDC_AUTH_SERVER_URL - auth server url QUARKUS_OIDC_CLIENT_ID - client id Ideally auth server is configured to propagate appropriate groups within access tokens. In case that group names are different see docs how to configure the mapping . See complete reference docs","title":"JWT Token"},{"location":"operator-manual/security.html#cors","text":"Cors is enabled by default with * allowing any domain access the API. To configure more precisely see CORS docs .","title":"CORS"},{"location":"operator-manual/security.html#ldap-groups","text":"Operator provides LDAP groups to roles mapping as alternative way to JWT Token Groups. It's possible to use both techniques where JWT provides username and its roles and LDAP queries for additional roles. To enable LDAP define following variables: APP_LDAP_ENABLED - Enable it by true . By default false APP_LDAP_URL - Ldap URL e.g. ldap://ldap.corp.redhat.com APP_LDAP_SEARCH_NAME - LDAP Query Search APP_LDAP_SEARCH_FILTER - Filter format. Default is uid=%s where %s is replaced by JWT username or by claim value if APP_LDAP_JWT_CLAIM is defined. APP_LDAP_SEARCH_GROUPS_ATTRNAME - LDAP attribute containing groups APP_LDAP_SEARCH_ROLE_USER_ATTRVALUE - group name for user role APP_LDAP_SEARCH_ROLE_ADMIN_ATTRVALUE - group name for admin role APP_LDAP_JWT_CLAIM - if set the filter value is used from claim name.","title":"LDAP Groups"},{"location":"user-guide/git-integration.html","text":"Git Integration To enable Continuous Deployment & Delivery the Operator needs to be notified of website.yaml changes as well as changes in content git repositories. Register Git Webhook Registering your git repo's webhook makes any changes to your git repo immediately applied in your deployment and also your website's content. Navigate to your git settings and add webhook. URL: https://<operator-url>/api/webhook TOKEN: the token defined in my-website.yaml Webhook Workflow Once webhook is triggered following steps are performed: Based on Git URL + TOKEN combination the operator finds appropriate website Pull's the main repository and check if website.yaml file has changed. If yes then performs new rollout. If no website.yaml change happens all components with same git url as webhook is refreshed. Securing Webhook Operator exposes api/webhook endpoint to all websites. To secure your website use unique security token in spec.secretToken to avoid unnecessary deployment/content refresh. Merge Request Previews On Merge request event the operator creates a copy of forked website with website name suffixed by -pr-<pr_number>-<env_name> . The copied website is deployed in exactly same way as source website - same included/excluded environments, secret token etc. The only difference is that git url and branch is used from the Merge Request and display name is suffixed by - Fork . Once request is closed the forked website is deleted. Deployment descriptor can control if preview environments are created or not via previews field.","title":"Git Integration"},{"location":"user-guide/git-integration.html#git-integration","text":"To enable Continuous Deployment & Delivery the Operator needs to be notified of website.yaml changes as well as changes in content git repositories.","title":"Git Integration"},{"location":"user-guide/git-integration.html#register-git-webhook","text":"Registering your git repo's webhook makes any changes to your git repo immediately applied in your deployment and also your website's content. Navigate to your git settings and add webhook. URL: https://<operator-url>/api/webhook TOKEN: the token defined in my-website.yaml","title":"Register Git Webhook"},{"location":"user-guide/git-integration.html#webhook-workflow","text":"Once webhook is triggered following steps are performed: Based on Git URL + TOKEN combination the operator finds appropriate website Pull's the main repository and check if website.yaml file has changed. If yes then performs new rollout. If no website.yaml change happens all components with same git url as webhook is refreshed.","title":"Webhook Workflow"},{"location":"user-guide/git-integration.html#securing-webhook","text":"Operator exposes api/webhook endpoint to all websites. To secure your website use unique security token in spec.secretToken to avoid unnecessary deployment/content refresh.","title":"Securing Webhook"},{"location":"user-guide/git-integration.html#merge-request-previews","text":"On Merge request event the operator creates a copy of forked website with website name suffixed by -pr-<pr_number>-<env_name> . The copied website is deployed in exactly same way as source website - same included/excluded environments, secret token etc. The only difference is that git url and branch is used from the Merge Request and display name is suffixed by - Fork . Once request is closed the forked website is deleted. Deployment descriptor can control if preview environments are created or not via previews field.","title":"Merge Request Previews"},{"location":"user-guide/live-website-coding.html","text":"Live Website Development The operator allows to deploy a website into any cluster including local k8s clusters e.g. minikube. To enable Live Website Coding experience it's needed to provide: Local files sync to the environment Port forwarding from the cluster to localhost These two features are nicely provided by Okteto . How to enable Live Website Development Deploy a website via operator like any other environment or just use existing local or remote deployment Install Okteto CLI Define which files should be synced via okteto.yaml configuration and optionally forward ports of other services e.g. REST API / DB etc. Guideline for okteto.yaml name : simple-content-dev # Name of the website's target deployment managed by operator (Required) command : httpd -D FOREGROUND # Same command as spaship/httpd (Required) # Mapping local directories to website's runtime container (spaship/httpd). # Can be just few of them or even new components that are not part of website.yaml # Root directory is `/var/www/html/` sync : - ../02-advanced/chrome:/var/www/html/template/ - ../shared-components:/var/www/html/shared-components/ - ../02-advanced/search:/var/www/html/search/ - ../02-advanced/home:/var/www/html/ persistentVolume : enabled : false # Volumes are disabled because they're initiated by init container forward : - 8080:8080 # Forward the spaship/httpd port to localhost resources : limits : cpu : \"100m\" memory : 100Mi # namespace: spaship-examples # Optionally hard code the name of namespace Starting and Stopping Live Coding Starting live coding experience simple as okteto up -n spaship-examples Website is available under http://localhost:8080 and any changes on local files are automatically synced to dev environment. Stopping live coding and rolling back to original state as simple as okteto down -n spaship-examples Live REST API Development In exactly same way any website service can be developed like REST API. See the SPA + REST API + Mongo Website Example . Examples All website examples demonstrates how Okteto can be used: Simple Website and okteto.yaml Advanced Website and okteto.yaml SPA + REST API + Mongo Website and okteto.yaml","title":"Live Website Development"},{"location":"user-guide/live-website-coding.html#live-website-development","text":"The operator allows to deploy a website into any cluster including local k8s clusters e.g. minikube. To enable Live Website Coding experience it's needed to provide: Local files sync to the environment Port forwarding from the cluster to localhost These two features are nicely provided by Okteto .","title":"Live Website Development"},{"location":"user-guide/live-website-coding.html#how-to-enable-live-website-development","text":"Deploy a website via operator like any other environment or just use existing local or remote deployment Install Okteto CLI Define which files should be synced via okteto.yaml configuration and optionally forward ports of other services e.g. REST API / DB etc.","title":"How to enable Live Website Development"},{"location":"user-guide/live-website-coding.html#guideline-for-oktetoyaml","text":"name : simple-content-dev # Name of the website's target deployment managed by operator (Required) command : httpd -D FOREGROUND # Same command as spaship/httpd (Required) # Mapping local directories to website's runtime container (spaship/httpd). # Can be just few of them or even new components that are not part of website.yaml # Root directory is `/var/www/html/` sync : - ../02-advanced/chrome:/var/www/html/template/ - ../shared-components:/var/www/html/shared-components/ - ../02-advanced/search:/var/www/html/search/ - ../02-advanced/home:/var/www/html/ persistentVolume : enabled : false # Volumes are disabled because they're initiated by init container forward : - 8080:8080 # Forward the spaship/httpd port to localhost resources : limits : cpu : \"100m\" memory : 100Mi # namespace: spaship-examples # Optionally hard code the name of namespace","title":"Guideline for okteto.yaml"},{"location":"user-guide/live-website-coding.html#starting-and-stopping-live-coding","text":"Starting live coding experience simple as okteto up -n spaship-examples Website is available under http://localhost:8080 and any changes on local files are automatically synced to dev environment. Stopping live coding and rolling back to original state as simple as okteto down -n spaship-examples","title":"Starting and Stopping Live Coding"},{"location":"user-guide/live-website-coding.html#live-rest-api-development","text":"In exactly same way any website service can be developed like REST API. See the SPA + REST API + Mongo Website Example .","title":"Live REST API Development"},{"location":"user-guide/live-website-coding.html#examples","text":"All website examples demonstrates how Okteto can be used: Simple Website and okteto.yaml Advanced Website and okteto.yaml SPA + REST API + Mongo Website and okteto.yaml","title":"Examples"},{"location":"user-guide/website-management.html","text":"Website Management Get Website Info kubectl get websites.spaship.io -n spaship-examples Output is: NAME GIT URL BRANCH DIR SSL VERIFY ENVIRONMENTS STATUS MESSAGE advanced https://github.com/spaship/spaship-examples.git websites/02-advanced true [ \"dev[1/1]\" ] Deployed simple https://github.com/spaship/spaship-examples.git websites/01-simple true [ \"prod[1/1]\" , \"dev[1/1]\" ] Deployed STATUS - Status of website. Can be: Git Clonning , Git Pulling , Creating , Deployed , Failed ENVIRONMENTS - Actual deployed environments and their ready/desired replicas. MESSAGE - Used for Failed status Register Website in Cluster Step 1: Create a namespace kubectl create namespace spaship-examples Step 2: Create a my-website.yaml file and apply it in the cluster apiVersion : spaship.io/v1 kind : Website metadata : name : my-website # Name of the website. Must be unique within namespace spec : gitUrl : https://github.com/spaship/spaship-examples.git branch : main # Branch (Optional) dir : websites/01-simple # Location of website.yaml file. Default is \".\" sslVerify : false # Perform SSL verification. Default is \"true\" secretToken : TOKENADVANCED # Secret token for Webhook API envs : # Control which environment will be deployed to. If not defined all envs are deployed. kubectl apply -n spaship-examples -f my-website.yaml Optional - Control Mapping Environments to Namespaces Thanks to exclusion and inclusion an administrator has under full control which environment will be deployed in which namespace. Example - excluded prod environment spec : envs : excluded : - prod Example - included only prod environment spec : envs : included : - prod Example - included only pr-* environments spec : envs : included : - pr-.* Delete Website in Cluster Delete website: kubectl delete websites.spaship.io -n website my-website Delete namespace: kubectl delete namespace website","title":"Website Management"},{"location":"user-guide/website-management.html#website-management","text":"","title":"Website Management"},{"location":"user-guide/website-management.html#get-website-info","text":"kubectl get websites.spaship.io -n spaship-examples Output is: NAME GIT URL BRANCH DIR SSL VERIFY ENVIRONMENTS STATUS MESSAGE advanced https://github.com/spaship/spaship-examples.git websites/02-advanced true [ \"dev[1/1]\" ] Deployed simple https://github.com/spaship/spaship-examples.git websites/01-simple true [ \"prod[1/1]\" , \"dev[1/1]\" ] Deployed STATUS - Status of website. Can be: Git Clonning , Git Pulling , Creating , Deployed , Failed ENVIRONMENTS - Actual deployed environments and their ready/desired replicas. MESSAGE - Used for Failed status","title":"Get Website Info"},{"location":"user-guide/website-management.html#register-website-in-cluster","text":"","title":"Register Website in Cluster"},{"location":"user-guide/website-management.html#step-1-create-a-namespace","text":"kubectl create namespace spaship-examples","title":"Step 1: Create a namespace"},{"location":"user-guide/website-management.html#step-2-create-a-my-websiteyaml-file-and-apply-it-in-the-cluster","text":"apiVersion : spaship.io/v1 kind : Website metadata : name : my-website # Name of the website. Must be unique within namespace spec : gitUrl : https://github.com/spaship/spaship-examples.git branch : main # Branch (Optional) dir : websites/01-simple # Location of website.yaml file. Default is \".\" sslVerify : false # Perform SSL verification. Default is \"true\" secretToken : TOKENADVANCED # Secret token for Webhook API envs : # Control which environment will be deployed to. If not defined all envs are deployed. kubectl apply -n spaship-examples -f my-website.yaml","title":"Step 2: Create a my-website.yaml file and apply it in the cluster"},{"location":"user-guide/website-management.html#optional-control-mapping-environments-to-namespaces","text":"Thanks to exclusion and inclusion an administrator has under full control which environment will be deployed in which namespace.","title":"Optional - Control Mapping Environments to Namespaces"},{"location":"user-guide/website-management.html#example-excluded-prod-environment","text":"spec : envs : excluded : - prod","title":"Example - excluded prod environment"},{"location":"user-guide/website-management.html#example-included-only-prod-environment","text":"spec : envs : included : - prod","title":"Example - included only prod environment"},{"location":"user-guide/website-management.html#example-included-only-pr-environments","text":"spec : envs : included : - pr-.*","title":"Example - included only pr-* environments"},{"location":"user-guide/website-management.html#delete-website-in-cluster","text":"Delete website: kubectl delete websites.spaship.io -n website my-website Delete namespace: kubectl delete namespace website","title":"Delete Website in Cluster"},{"location":"user-guide/website-specification.html","text":"Website Specification Website is specified in website.yaml and covers Environments and Components . Environments Each environment defines: Name (as object key) Default branch Deployments overrides Skip Components Example: envs : dev : branch : main prod : branch : prod Components Every component needs to define its kind . This allows design a website as different components with their sources. Component git Content stored in git repository in particular branch or tag . components : - context : /path kind : service # Service kind - only route/ingress is created spec : url : https://github.com/spaship/spaship-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch/Tag override on component level envs : dev : \"2.0.0\" # Branch/Tag override on environment level Component service Component has no content and Operator just creates a route for it. components : - context : /path kind : service spec : serviceName : searchapi # Service name targetPort : 8080 # Service port Defaults and Overrides The website.yaml strongly uses defaults & overrides strategy. For example branch name is defined on following places: Environment -> Component -> Component's environment envs.<env_name>.branch -> components.spec.branch -> components.spec.envs.<env_name> This offers flexibility to design each environment differently. Complete Spec Reference The complete website.yaml reference apiVersion : v1 # Website API reference labels : # Labels label-key : label-value # Key is label key, Value is label value envs : # Website environments dev : # Name of environment branch : main # Default branch for all componetns prod : branch : prod skipContexts : # Skip Components for given - /search - /search/api deployment : # Deployment Overrides replicas : 2 # Number of replicas httpd : # Overrides for httpd resources : # Standard k8s resources requests : cpu : 100m memory : 150Mi limits : cpu : 500m memory : 250Mi components : # Components - context : /theme # Path under component lives kind : git # Component kind. Available kinds: \"git\", \"service\" spec : url : https://github.com/spaship/spaship-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch override on component level envs : dev : \"2.0.0\" # Branch override on environment level - context : /search/api kind : service # Service kind - only route/ingress is created spec : serviceName : searchapi # Service name targetPort : 8080 # Service port - context : / # Home SPA kind : git spec : dir : /websites/02-advanced/home","title":"Website Specification"},{"location":"user-guide/website-specification.html#website-specification","text":"Website is specified in website.yaml and covers Environments and Components .","title":"Website Specification"},{"location":"user-guide/website-specification.html#environments","text":"Each environment defines: Name (as object key) Default branch Deployments overrides Skip Components Example: envs : dev : branch : main prod : branch : prod","title":"Environments"},{"location":"user-guide/website-specification.html#components","text":"Every component needs to define its kind . This allows design a website as different components with their sources.","title":"Components"},{"location":"user-guide/website-specification.html#component-git","text":"Content stored in git repository in particular branch or tag . components : - context : /path kind : service # Service kind - only route/ingress is created spec : url : https://github.com/spaship/spaship-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch/Tag override on component level envs : dev : \"2.0.0\" # Branch/Tag override on environment level","title":"Component git"},{"location":"user-guide/website-specification.html#component-service","text":"Component has no content and Operator just creates a route for it. components : - context : /path kind : service spec : serviceName : searchapi # Service name targetPort : 8080 # Service port","title":"Component service"},{"location":"user-guide/website-specification.html#defaults-and-overrides","text":"The website.yaml strongly uses defaults & overrides strategy. For example branch name is defined on following places: Environment -> Component -> Component's environment envs.<env_name>.branch -> components.spec.branch -> components.spec.envs.<env_name> This offers flexibility to design each environment differently.","title":"Defaults and Overrides"},{"location":"user-guide/website-specification.html#complete-spec-reference","text":"The complete website.yaml reference apiVersion : v1 # Website API reference labels : # Labels label-key : label-value # Key is label key, Value is label value envs : # Website environments dev : # Name of environment branch : main # Default branch for all componetns prod : branch : prod skipContexts : # Skip Components for given - /search - /search/api deployment : # Deployment Overrides replicas : 2 # Number of replicas httpd : # Overrides for httpd resources : # Standard k8s resources requests : cpu : 100m memory : 150Mi limits : cpu : 500m memory : 250Mi components : # Components - context : /theme # Path under component lives kind : git # Component kind. Available kinds: \"git\", \"service\" spec : url : https://github.com/spaship/spaship-examples.git # Git URL of repository. Default is Git URL of website.yaml dir : /websites/02-advanced/chrome # Subdirectory within. Default is \".\" branch : \"1.0.0\" # Branch override on component level envs : dev : \"2.0.0\" # Branch override on environment level - context : /search/api kind : service # Service kind - only route/ingress is created spec : serviceName : searchapi # Service name targetPort : 8080 # Service port - context : / # Home SPA kind : git spec : dir : /websites/02-advanced/home","title":"Complete Spec Reference"}]}